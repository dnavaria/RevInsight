import pandas as pd


class RevenueCalculator:
    @staticmethod
    def compute_monthly_revenue(data) -> pd.Series:
        """
        Compute the total revenue generated by the online store for each month.

        This function first converts the order_date column to datetime format, if not already.
        It then calculates the total price for each order by multiplying the product price by
        the quantity ordered. Finally, it groups the data by year and month, sums up the
        total price for each group, and returns a series sorted by year and month.

        Parameters:
        data (pd.DataFrame): The dataframe containing order data with columns including
                             'order_date', 'product_price', and 'quantity'.

        Returns:
        pd.Series: A series where the index consists of tuples (year, month) and the
                   values are the summed total prices for each month.
        """
        data['order_date'] = pd.to_datetime(data['order_date'])
        data['total_price'] = data['product_price'] * data['quantity']
        grouped_data = data.groupby(
            [data['order_date'].dt.year, data['order_date'].dt.strftime('%m')]
        )['total_price'].sum()
        return grouped_data.sort_index()

    @staticmethod
    def compute_product_revenue(data) -> pd.Series:
        """
        Compute the total revenue generated by each product across all orders.

        This function calculates the total sales for each product by multiplying the product price
        by the quantity ordered. It then groups the data by product_id and sums the total sales
        for each product, returning a series with the product_id as the index.

        Parameters:
        data (pd.DataFrame): The dataframe containing order data with columns including
                             'product_id', 'product_price', and 'quantity'.

        Returns:
        pd.Series: A series where the index is the product_id and the values are the summed
                   total sales for each product.
        """
        data['total_sales'] = data['product_price'] * data['quantity']
        return data.groupby('product_id')['total_sales'].sum()

    @staticmethod
    def compute_customer_revenue(data) -> pd.Series:
        """
        Compute the total revenue generated by each customer across all their orders.

        This function calculates the total price for each order by multiplying the product price
        by the quantity ordered. It then groups the data by customer_id and sums the total price
        for each customer, returning a series with the customer_id as the index.

        Parameters:
        data (pd.DataFrame): The dataframe containing order data with columns including
                             'customer_id', 'product_price', and 'quantity'.

        Returns:
        pd.Series: A series where the index is the customer_id and the values are the summed
                   total prices for each customer.
        """
        data['total_price'] = data['product_price'] * data['quantity']
        return data.groupby('customer_id')['total_price'].sum()

    @staticmethod
    def top_n_customers(data, number_of_customers=10) -> pd.Series:
        """
        Identify the top N customers based on the revenue they generated.

        This function first calculates the total revenue for each customer by invoking the
        compute_customer_revenue method. It then returns the top N customers with the highest
        revenue using the nlargest method.

        Parameters:
        data (pd.DataFrame): The dataframe containing order data.
        number_of_customers (int): The number of top customers to retrieve.

        Returns:
        pd.Series: A series where the index is the customer_id and the values are the summed
                   total revenues, sorted from highest to lowest, limited to the top N customers.
        """
        customer_revenue = RevenueCalculator.compute_customer_revenue(data)
        return customer_revenue.nlargest(number_of_customers)
